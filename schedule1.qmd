---
title: Schedule
toc: false
---

::: panel-tabset
## Schedule

```{r}
#| echo: false
#| results: asis
#| warning: false

# read in course settings
course_settings <- yaml::read_yaml("_course-settings.yml")

# collect list of all materials
materials_list <- purrr::map(course_settings$schedule, "materials") |>
  purrr::list_flatten()

# TEMPORARILY remove all labs
# come back later and use due-date field instead of date

is_lab <- function(x) {
  if (exists("href", x)) {
    stringr::str_ends(x$href, "lab.qmd")
  } else {
    FALSE
  }
}

materials_list <- materials_list |>
  purrr::discard(is_lab)

# get set of all dates
sched_dates <- purrr::map_chr(materials_list, "date") |>
  lubridate::mdy()

# create a vector all all dates (M-F) to appear in calendar
library(lubridate)

first_day <- min(sched_dates)
first_mon <- first_day - wday(first_day) + 2
last_day <- max(sched_dates)
last_fri <- last_day + (6 - wday(last_day))

date_seq <- 0:(last_fri - first_mon)
cal_dates <- first_mon + 
  date_seq[-c(seq(6, as.integer(last_fri - first_mon), 7),
              seq(7, as.integer(last_fri - first_mon), 7))]# exclude weekends

# create list of all titles to appear on those dates
return_title_if_match <- function(x, d) {
  if (mdy(x$date) == d) {
    if(exists("title", where = x)) {
      title <- x$title
    } else {
      if (file.exists(x$href)) { # if a future file was ignored, update path
        current_path <- x$href
      } else {
        dir_path_part_to_ignore <- stringr::str_extract(x$href,
                                               "^.*/([^/]+)/[^/]+$", group = 1)
        dir_path_part_ignored  <- paste0("_", dir_path_part_to_ignore)
        current_path <- stringr::str_replace(x$href,
                                             dir_path_part_to_ignore,
                                             dir_path_part_ignored)
      }
      title <- rmarkdown::yaml_front_matter(current_path)$title
    }
    if(exists("href", where = x)) { # format title
      title <- glue::glue("<a href='{x$href}'><span class='btn' style='background-color: {x$`calendar-color`}; color: {x$`calendar-color2`}; '>{title}</span></a>")
    } else if (exists("calendar-color2", where = x)) {
      title <- glue::glue("<span class='btn' style='background-color: {x$`calendar-color`}; color: {x$`calendar-color2`}; '>{title}</span>")
    } else if (exists("calendar-color", where = x)) {
      title <- glue::glue("<span class='btn' style='background-color: {x$`calendar-color`};'>{title}</span>")
    } else {
      title <- glue::glue("<span class='btn'>{title}</span>")
    }
    title
  }
}

return_titles <- function(x) {
  title_vec <- purrr::map(materials_list, return_title_if_match, x) |>
  unlist()
  if (length(title_vec) > 1) { # if there are multiple titles, add a line break
    glue::glue_collapse(title_vec, sep = "<br>")
  } else {
    if(is.null(title_vec)) {
      " "
    } else {
      title_vec
    }
  }
}

# return title
cal_titles <- purrr::map(cal_dates, return_titles)

# form calendar tibble

## interleave two lists
# cal_dates <- as.list(cal_dates)
idx <- order(c(seq_along(cal_dates), seq_along(cal_titles)))
d_and_t <- c(lubridate::mday(cal_dates), cal_titles)[idx]

mon_idx <- sort(c(seq(1, length(d_and_t), 10),
                  seq(2, length(d_and_t), 10)))
tue_idx <- sort(c(seq(3, length(d_and_t), 10),
                  seq(4, length(d_and_t), 10)))
wed_idx <- sort(c(seq(5, length(d_and_t), 10),
                  seq(6, length(d_and_t), 10)))
thu_idx <- sort(c(seq(7, length(d_and_t), 10),
                  seq(8, length(d_and_t), 10)))
fri_idx <- sort(c(seq(9, length(d_and_t), 10),
                  seq(10, length(d_and_t), 10)))

cal_df <- tibble::tibble(MON = d_and_t[mon_idx],
                         TUE = d_and_t[tue_idx],
                         WED = d_and_t[wed_idx],
                         THU = d_and_t[thu_idx],
                         FRI = d_and_t[fri_idx])

library(gt)

make_cal <- function(cal_df, from_week, to_week, mo_label) {
  cal_df2 <- cal_df |>
    dplyr::slice(from_week:to_week)
  is_date <- rep(c(TRUE, FALSE), nrow(cal_df2) / 2)
  gt(cal_df2) |>
    tab_header(title = md(paste0("## ", mo_label))) |>
    cols_align(align = "center") |>
    cols_width(everything() ~ pct(20)) |>
    tab_style( # style col names
      style = cell_text(size = pct(75)),
      locations = cells_column_labels()) |>
    tab_style( # style rows with dates
      style = cell_borders(sides = c("bottom"),
                           style = NULL),
      locations = cells_body(rows = is_date)) |> 
    tab_style( # style columns with vertical lines
      style = cell_borders(sides = c("left", "right"),
                           color = "--quarto-border-color"),
      locations = cells_body()) |>
    tab_style( # remove top border
      style = cell_borders(sides = "top",
                           style = NULL),
      locations = cells_column_labels()) |>
    opt_horizontal_padding(scale = 2) |>
    opt_vertical_padding(scale = 2) |>
    tab_options(table.border.top.style = "none") |>
    fmt_markdown()
}

## make by-month calendars to cover the schedule ##

# months of every item on calendar
cal_months <- month(cal_dates, label = TRUE, abbr = FALSE)
unique_mo <- unique(cal_months)

for (i in seq_along(unique_mo)) {
  mo_label <- unique_mo[i]
  mo_span <- range(which(cal_months == mo_label))
  
  make_cal(cal_df,
           from_week = ceiling(mo_span[1]/5) * 2 - 1, 
           to_week = ceiling(mo_span[2]/5) * 2,
           mo_label = mo_label) |>
    htmltools::tagList() |>
    print()
}

# blank out materials from other months (maybe form cal_df after month is specified)
```

<!-- ![](assets/schedule-sketch-3.png) -->

## Important times

Here is a tentative list of important, recurring times:

-   Homeworks are always due at **11pm** on the specified day (usually Thursday)
-   Labs are always due at **11pm** on the specified day (usually Thursday)
-   Exit tickets are due at **11pm** 7 days after class
    -   So for Monday classes, they are due the following Monday at 11pm
    -   For Wednesday classes, they are due the following Wednesday at 11pm
-   Office hours with Nicky: [Link to Webex](https://ohsu.webex.com/meet/wakim)
    -   Thursdays, 11:30am - 1pm
    -   Exceptions: 
        -   January 25th: 10:30am - 12pm
        -   February 22nd: 10:30am - 12pm
-   Class meets on Mondays and Wednesdays at **1 - 2:50 pm**

## Credit to

Special thank you to Andrew Bray, who taught the Quarto workshop I attended. This schedule page was mostly taken from the Schedule on his [STAT 20 course page](https://www.stat20.org/). You can find the `.qmd` file for Andrew's schedule page on [his Github](https://github.com/stat20/stat20/blob/main/schedule.qmd).
:::
