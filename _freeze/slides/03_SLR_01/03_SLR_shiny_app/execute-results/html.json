{
  "hash": "9edb7038805638185ab36a7c6782a841",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\nformat: \n  html:\n    page-layout: full\nserver: shiny\n---\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plotly'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks plotly::filter(), stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n# Life Expectancy Simple Linear Regression\n\nLet's try to find a model fit with the lowest score!\n\nClick two distinct points of the plot to draw a line. Try to minimize the score (at the top of the plot) using different lines. To create a new line just click on the plot more than twice. In this activity, the number we get is our \"score.\" In statistics, this score is actually called the sum of squared errors (SSE). Were you able to get the best-fit line presented in class?\n\n\n::: {.cell .panel-fill}\n::: {.cell-output-display}\n```{=html}\n<div class=\"shiny-plot-output html-fill-item\" data-click-clip=\"TRUE\" data-click-id=\"plot_click\" id=\"plot1\" style=\"width:100%;height:400px;\"></div>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"check\" class=\"shiny-text-output\"></div>\n```\n:::\n:::\n\n::: {.cell .panel-fill}\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-widget-output shiny-report-size shiny-report-theme html-fill-item-overflow-hidden html-fill-item\" id=\"plot2\" style=\"width:100%;height:400px;\"></div>\n```\n:::\n:::\n\n::: {.cell context='server'}\n\n:::\n\npreserve5419bafd77983e81\npreserve548590c74e91c811\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"htmlwidgets\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.6.2\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"www\"]}]},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"htmlwidgets.js\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"htmlwidgets\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[true]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.6.2\"]}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"version\",\"src\",\"meta\",\"script\",\"stylesheet\",\"head\",\"attachment\",\"package\",\"all_files\",\"pkgVersion\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"html_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"plotly-binding\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.10.3\"]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"file\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"htmlwidgets\"]}]},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"plotly.js\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"NULL\"},{\"type\":\"character\",\"attributes\":{},\"value\":[\"plotly\"]},{\"type\":\"logical\",\"attributes\":{},\"value\":[false]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.10.3\"]}]}]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"base\",\"cli\",\"colorspace\",\"compiler\",\"data.table\",\"datasets\",\"digest\",\"dplyr\",\"ellipsis\",\"evaluate\",\"fansi\",\"fastmap\",\"forcats\",\"generics\",\"ggplot2\",\"glue\",\"graphics\",\"grDevices\",\"grid\",\"gtable\",\"hms\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"httr\",\"jsonlite\",\"knitr\",\"later\",\"lazyeval\",\"lifecycle\",\"lubridate\",\"magrittr\",\"methods\",\"mime\",\"munsell\",\"pillar\",\"pkgconfig\",\"plotly\",\"promises\",\"purrr\",\"R6\",\"Rcpp\",\"readr\",\"rlang\",\"rmarkdown\",\"rstudioapi\",\"scales\",\"shiny\",\"stats\",\"stringi\",\"stringr\",\"tibble\",\"tidyr\",\"tidyselect\",\"tidyverse\",\"timechange\",\"tools\",\"tzdb\",\"utf8\",\"utils\",\"vctrs\",\"viridisLite\",\"withr\",\"xfun\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.3.1\",\"3.6.1\",\"2.1-0\",\"4.3.1\",\"1.14.8\",\"4.3.1\",\"0.6.33\",\"1.1.2\",\"0.3.2\",\"0.21\",\"1.0.4\",\"1.1.1\",\"1.0.0\",\"0.1.3\",\"3.4.4\",\"1.6.2\",\"4.3.1\",\"4.3.1\",\"4.3.1\",\"0.3.4\",\"1.1.3\",\"0.5.6\",\"1.6.2\",\"1.6.11\",\"1.4.7\",\"1.8.7\",\"1.43\",\"1.3.1\",\"0.2.2\",\"1.0.3\",\"1.9.2\",\"2.0.3\",\"4.3.1\",\"0.12\",\"0.5.0\",\"1.9.0\",\"2.0.3\",\"4.10.3\",\"1.2.1\",\"1.0.2\",\"2.5.1\",\"1.0.11\",\"2.1.4\",\"1.1.1\",\"2.24\",\"0.15.0\",\"1.2.1\",\"1.7.5\",\"4.3.1\",\"1.7.12\",\"1.5.0\",\"3.2.1\",\"1.3.0\",\"1.2.0\",\"2.0.0\",\"0.2.0\",\"4.3.1\",\"0.4.0\",\"1.2.3\",\"4.3.1\",\"0.6.3\",\"0.4.2\",\"2.5.0\",\"0.40\",\"1.8-4\",\"2.3.7\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve5419bafd77983e81": "\n<script type=\"application/shiny-prerendered\" data-context=\"server\">\n # available data\n  mydata <- read.csv(file=\"../data/lifeexp_femlit_2011.csv\", sep=',', header=TRUE) %>% \n    drop_na(life_expectancy_years_2011, female_literacy_rate_2011) %>%\n    select(female_literacy_rate_2011, life_expectancy_years_2011)\n  colnames(mydata) <- c('x','y') \n  click_saved <- reactiveValues(singleclick = NULL) #niente cliccato\n  data = as.data.frame(cbind(intercept = 50.928, slope = 0.2322, SSE = 2942.635))\n  \n  # plot is available\n  output$plot1 <- renderPlot({\n    if(!is.null(input$file1)){\n      mydata <- read.table(input$file1$datapath,\n                           header = input$header,\n                           row.names = NULL,\n                           sep = ',')\n      mydata <- mydata %>% dplyr::select(where(is.numeric))\n      mydata <- mydata[,c(1,2)]\n      colnames(mydata) <- c('x','y')\n    }\n    prova <- dim(mydata)[1]\n    plot(mydata$x, mydata$y, xlab='Female literacy rate (%)', ylab='Life Expectancy (years)', pch=16)\n  })\n  \n  output$plot2 <- renderPlotly({\n    isolate({\n      plot_ly(data = data, x=data$intercept, \n              y=data$slope, z = data$SSE, \n              type = \"scatter3d\", mode=\"markers\") %>%\n        layout(title = 'SCORE (or SSE) from your eyeball model', \n               scene = list(xaxis=list(title = 'Intercept'),\n                            yaxis=list(title = 'Slope'),\n                            zaxis=list(title = 'SCORE')))\n    })\n  })\n  \n  # if you click\n  observeEvent(eventExpr = input$plot_click, handlerExpr = { \n    \n    click_saved$singleclick <- rbind(click_saved$singleclick, c(input$plot_click[1], input$plot_click[2])) \n    if(dim(click_saved$singleclick)[1]>2)\n      click_saved$singleclick <- as.data.frame(click_saved$singleclick[dim(click_saved$singleclick)[1],])\n    \n    if(!is.null(input$file1)){\n      mydata <- read.table(input$file1$datapath,\n                           header = input$header,\n                           row.names = NULL,\n                           sep = ',')\n      mydata <- mydata %>% dplyr::select(where(is.numeric))\n      mydata <- mydata[,c(1,2)]\n      colnames(mydata) <- c('x','y')\n    }\n    \n    if(dim(click_saved$singleclick)[1]==2){\n      ys <- as.vector(unlist(click_saved$singleclick[,2]))\n      xs <- as.vector(unlist(click_saved$singleclick[,1]))\n      fit <- lm(ys~xs)\n      \n      # projections\n      proj1 <- fit$coefficients[2] * mydata$x + fit$coefficients[1] \n      # residuals\n      myscore <- NULL\n      \n      for(k in 1:dim(mydata)[1]){\n        residuals <- rbind( mydata[k,], c(mydata[k,1], proj1[k]) )\n        \n        myscore <- rbind(myscore,(residuals[1,] -residuals[2,])^2)\n      }\n      \n      data = as.data.frame(rbind(data, c(intercept = fit$coefficients[1],\n                                         slope = fit$coefficients[2],\n                                         SSE = round(sum(colSums(myscore)),2))))\n    }\n    \n    output$plot1 <- renderPlot({\n      plot(mydata$x, mydata$y, xlab='Female literacy rate (%)', ylab='Life Expectancy (years)', pch=16)\n      \n      points(click_saved$singleclick[,1], click_saved$singleclick[,2], col='red', pch=16)\n      if(dim(click_saved$singleclick)[1]==2){\n        ys <- as.vector(unlist(click_saved$singleclick[,2]))\n        xs <- as.vector(unlist(click_saved$singleclick[,1]))\n        fit <- lm(ys~xs)\n        abline(fit, col='red')\n        \n        # projections\n        proj1 <- fit$coefficients[2] * mydata$x + fit$coefficients[1] \n        points(mydata$x, proj1, col='purple')\n        \n        # residuals\n        myscore <- NULL\n        \n        for(k in 1:dim(mydata)[1]){\n          residuals <- rbind( mydata[k,], c(mydata[k,1], proj1[k]) )\n          lines(residuals, col='purple')\n          \n          myscore <- rbind(myscore,(residuals[1,] -residuals[2,])^2)\n        }\n        \n        \n        mtext(paste(\"Your SCORE (or SSE) is\", format(round(sum(colSums(myscore)),2), nsmall=1, big.mark = ',')), side=3)\n        \n        output$check <- renderText(paste(\"Fitted model: E(life expectancy|literacy rate) = \", \n                                         format(round(fit$coefficients[2],2), nsmall=1, big.mark = ','),\n                                         \"*literacy rate + \", \n                                         format(round(fit$coefficients[1],2),nsmall=1, big.mark = ','), \n                                         sep=\"\"))\n        \n      }\n      \n      \n    })\n    \n    plotlyProxy(\"plot2\") %>%\n      plotlyProxyInvoke(\"addTraces\", \n                        list(x = c(data$intercept, data$intercept), # need at least 2 points\n                             y = c(data$slope, data$slope),\n                             z = c(data$SSE, data$SSE), \n                             type = \"scatter3d\",\n                             mode = \"markers\"\n                        )\n      )\n    \n    \n  })\n\n\n</script>\n",
      "preserve548590c74e91c811": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n"
    },
    "postProcess": true
  }
}