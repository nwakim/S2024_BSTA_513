---
title: "Additional Example on Model Diagnostics"
editor: visual
---

```{r}
#| label: "setup" 
#| include: false
#| message: false
#| warning: false

library(tidyverse)    
library(openintro)
library(janitor)
library(rstatix)
library(knitr)
library(gtsummary)
library(moderndive)
library(gt)
library(broom) 
library(here) 
library(pwr) 
library(gridExtra)   # grid.arrange()
library(readxl)
library(describedata) # gladder()
library(gridExtra)   # grid.arrange()
library(ggfortify)  # autoplot(model)
library(gtsummary)

knitr::opts_chunk$set(echo = TRUE, fig.height=3, fig.width=5,
                      message = FALSE, warning = FALSE)
```

## Example: Chapter 5 Problem 9

-   In an experiment designed to describe the doseâ€“response curve for vitamin K, individual rats were depleted of their vitamin K reserves and then fed dried liver for 4 days at different dosage levels.
-   The response of each rat was measured as the concentration of a clotting agent needed to clot a sample of its blood in 3 minutes.
-   The results of the experiment on 12 rats are given in the following table; **values are expressed in common logarithms for both dose and response**.
    -   *Note: by "common logarithm" the authors mean a base 10 logarithm*

> Question: why did they choose a log-log transformation?

```{r}
rats <- read_excel("data/CH05Q09.xls")
glimpse(rats)

loglog_plot <- ggplot(rats, aes(x = LOGDOSE, y = LOGCONC)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Transformed variables")
loglog_plot
```

## "Untransform" the variables

```{r fig.height=3, fig.width=7}
rats <- rats %>% 
  mutate(
    DOSE = 10^LOGDOSE,
    CONC = 10^LOGCONC
    )
glimpse(rats)

xy_plot <- ggplot(rats, aes(x = DOSE, y = CONC)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Untransformed variables")

grid.arrange(xy_plot, loglog_plot, ncol = 2)
```

## Transform dependent variable?

```{r}
ggplot(rats, aes(x = CONC)) +
  geom_histogram()
```

### `gladder()`

```{r fig.width=7, fig.height=5}
gladder(rats$CONC)
```

### `ladder()`

-   `ladder()` output tests various transformations of the data for normality
-   Shapiro-Wilkes test is used to assess for normality
    -   $H_0$: data are from a normal population
    -   $H_A$: data are NOT from a normal population

```{r}
ladder(rats$CONC) %>% gt()
```

## Transform independent variable?

```{r}
ggplot(rats, aes(x = DOSE)) +
  geom_histogram()
```

### `gladder()`

```{r fig.width=7, fig.height=5}
gladder(rats$DOSE)
```

### `ladder()`

```{r}
ladder(rats$DOSE) %>% gt()
```

## Add transformations to dataset

```{r}
names(rats)

rats <- rats %>% 
  mutate(
    # LOGCONC = log10(CONC), # already in data
    CONC_invsqrt = 1/sqrt(CONC),
    # LOGDOSE = log10(DOSE), # already in data
    DOSE_sqrd = DOSE^2
  )

glimpse(rats)
```

## Compare Scatterplots

```{r fig.width=10, fig.height=5}
plot_m1 <- ggplot(rats, aes(x = DOSE,
                 y = CONC)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod1: CONC ~ DOSE")

plot_m2 <- ggplot(rats, aes(x = DOSE,
                 y = LOGCONC)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod2: log10(CONC) ~ DOSE")

plot_m3 <- ggplot(rats, aes(x = DOSE,
                 y = CONC_invsqrt)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod3: 1/sqrt(CONC) ~ DOSE")

plot_m4 <- ggplot(rats, aes(x = LOGDOSE,
                 y = CONC)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod4: CONC ~ log10(DOSE)")

plot_m5 <- ggplot(rats, aes(x = DOSE_sqrd,
                 y = CONC)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod5: CONC ~ DOSE + DOSE^2")

plot_m6 <- ggplot(rats, aes(x = LOGDOSE,
                 y = LOGCONC)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod6: log10(CONC) ~ log10(DOSE)")

grid.arrange(plot_m1, plot_m2, plot_m3, 
             plot_m4, plot_m5, plot_m6,
             nrow = 2)
```

## Run models with transformations

### Model 1: $CONC \sim DOSE$

```{r}
model1 <- lm(CONC ~ DOSE,
             data = rats)

aug1 <- augment(model1)
tidy(model1) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model1)
```

```{r fig.height=3, fig.width=4}
plot(model1, which = 5)
```

### Model 2: $log10(CONC) \sim DOSE$

```{r}
model2 <- lm(LOGCONC ~ DOSE,
             data = rats)

aug2 <- augment(model2)
tidy(model2) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model2)
```

```{r fig.height=3, fig.width=4}
plot(model2, which = 5)
```

### Model 3: $1/sqrt(CONC) \sim DOSE$

```{r}
model3 <- lm(CONC_invsqrt ~ DOSE,
             data = rats)

aug3 <- augment(model3)
tidy(model3) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model3)
```

```{r fig.height=3, fig.width=4}
plot(model3, which = 5)
```

### Model 4: $CONC \sim log10(DOSE)$

```{r}
model4 <- lm(CONC ~ LOGDOSE,
             data = rats)

aug4 <- augment(model4)
tidy(model4) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model4)
```

```{r fig.height=3, fig.width=4}
plot(model4, which = 5)
```

### Model 5: $CONC \sim DOSE + DOSE^2$

```{r}
model5 <- lm(CONC ~ DOSE + DOSE_sqrd,
             data = rats)

aug5 <- augment(model5)
tidy(model5) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model5)
```

```{r fig.height=3, fig.width=4}
plot(model5, which = 5)
```

### Model 6: $log10(CONC) \sim log10(DOSE)$

```{r}
model6 <- lm(LOGCONC ~ LOGDOSE,
             data = rats)

aug6 <- augment(model6)
tidy(model6) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model6)
```

```{r fig.height=3, fig.width=4}
plot(model6, which = 5)
```

## Normal Q-Q plots comparison

```{r fig.height=5, fig.width=7}
# par(mfrow=c(#row,#col)) is a base R command
# It sets up the graphics window to show multiple plots in a grid
# specify the number of rows and columns
par(mfrow=c(2,3))  # 2 rows, 3 columns
plot(model1, which = 2)
plot(model2, which = 2)
plot(model3, which = 2)
plot(model4, which = 2)
plot(model5, which = 2)
plot(model6, which = 2)
par(mfrow=c(1,1))  # set back to the standard 1 row x 1 column
```

## Residual plots comparison

```{r fig.height=5, fig.width=7}
# par(mfrow=c(#row,#col)) is a base R command
# It sets up the graphics window to show multiple plots in a grid
# specify the number of rows and columns
par(mfrow=c(2,3))  # 2 rows, 3 columns
plot(model1, which = 1)
plot(model2, which = 1)
plot(model3, which = 1)
plot(model4, which = 1)
plot(model5, which = 1)
plot(model6, which = 1)
par(mfrow=c(1,1))  # set back to the standard 1 row x 1 column
```

## Leverage & Cook's distance comparison

```{r fig.height=5, fig.width=7}
# par(mfrow=c(#row,#col)) is a base R command
# It sets up the graphics window to show multiple plots in a grid
# specify the number of rows and columns
par(mfrow=c(2,3))  # 2 rows, 3 columns
plot(model1, which = 5)
plot(model2, which = 5)
plot(model3, which = 5)
plot(model4, which = 5)
plot(model5, which = 5)
plot(model6, which = 5)
par(mfrow=c(1,1))  # set back to the standard 1 row x 1 column
```

## Models comparison

```{r}
# library(gtsummary) for tbl_regression() and tbl_merge()

tbl_model1 <- tbl_regression(model1)
# tbl_model1

tbl_model2 <- tbl_regression(model2)
# tbl_model2

tbl_model3 <- tbl_regression(model3)
# tbl_model3

tbl_model4 <- tbl_regression(model4)
# tbl_model4

tbl_model5 <- tbl_regression(model5)
# tbl_model5

tbl_model6 <- tbl_regression(model6)
# tbl_model6

# Compare models 1-3
tbl_merge(
  tbls = list(tbl_model1, tbl_model2, tbl_model3),
  tab_spanner = c("Model 1: y=CONC", "Model 2: y=log10(CONC)", "Model 3: y=1/sqrt(CONC)")
  )

# Compare models 4-6
tbl_merge(
  tbls = list(tbl_model4, tbl_model5, tbl_model6),
  tab_spanner = c("Model 4: y=CONC", "Model 5: y=CONC", "Model 6: y=1/sqrt(CONC)")
  )
```

## Other fit statistics comparison

```{r}
glance(model1) %>% gt()
glance(model2) %>% gt()
glance(model3) %>% gt()
glance(model4) %>% gt()
glance(model5) %>% gt()
glance(model6) %>% gt()
```
