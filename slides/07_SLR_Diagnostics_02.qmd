---
title: "SLR: Model Evaluation and Diagnostics"
author: "Nicky Wakim"
title-slide-attributes:
    data-background-color: "#213c96"
date: "01/29/2023"
categories: ["Week 4"]
format: 
  revealjs:
    theme: [default, simple_NW.scss]
    toc: true
    toc-depth: 1
    toc-title: Class Overview
    chalkboard: true
    slide-number: true
    show-slide-number: all
    width: 1955
    height: 1100
    footer: SLR 4
    html-math-method: mathjax
    highlight-style: ayu
execute:
  echo: true
  freeze: auto  # re-render only when source changes
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| label: "setup" 
#| include: false
#| message: false
#| warning: false

library(tidyverse)    
library(openintro)
library(janitor)
library(rstatix)
library(knitr)
library(gtsummary)
library(moderndive)
library(gt)
library(broom) 
library(here) 
library(pwr) 
library(gridExtra)   # grid.arrange()
library(readxl)
library(describedata) # gladder()
library(gridExtra)   # grid.arrange()
library(ggfortify)  # autoplot(model)
library(gtsummary)

knitr::opts_chunk$set(echo = TRUE, fig.height=3, fig.width=5,
                      message = FALSE, warning = FALSE)
```

```{r}
gapm <- read_csv("data/lifeexp_femlit_2011.csv")
model1 <- lm(life_expectancy_years_2011 ~ female_literacy_rate_2011,
data = gapm)

tbl_regression(model1, intercept = T, 
               label = list(female_literacy_rate_2011 ~ "Female Literacy Rate")) %>% as_gt() %>%
  tab_options(table.font.size = 30)
```


# Load data


```{r}
# Load the data - update code if the csv file is not in the same location on your computer
gapm <- read_csv("data/lifeexp_femlit_2011.csv")

glimpse(gapm)
```

# Regression `model1`

```{r}
# Fit regression model:
model1 <- lm(life_expectancy_years_2011 ~ female_literacy_rate_2011,
             data = gapm)

summary(model1)
tidy(model1) %>% gt()
```

## Scatterplot

```{r}
ggplot(gapm, aes(x = female_literacy_rate_2011,
                 y = life_expectancy_years_2011)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen")
```

# Outlier detection

## `autoplot()`

```{r fig.height=5, fig.width=7}
autoplot(model1) # in ggfortify package
```


## Residual plot

* $x$ = explanatory variable from regression model,  
or the fitted values for a multiple regression
* $y$ = residuals from regression model

```{r}
ggplot(model1, 
       aes(x = female_literacy_rate_2011, 
           y = .resid)) + 
  geom_point() +
  geom_abline(
    intercept = 0, 
    slope = 0, 
    color = "orange") +
  labs(title = "Residual plot")
```

## Residuals

* Use `augment()` to get a tibble with the orginal data, as well as the residuals and some other important values.

```{r}
# augment is from the broom package
aug1 <- augment(model1)
glimpse(aug1)
```

## Leverage $h_i$

* Values of leverage are: $0 \leq h_i \leq 1$
* Book: Inspect values with leverage $h_i > 4/n$ where $n$ = sample size.
    * Example: if $n=80$, then inspect points with $h_i > 0.05$
* This is conservative. Can use $h_i > 6/n$
    * Example: if $n=80$, then inspect points with $h_i > 0.075$
* Leverage values are the `.hat` values in the "augment tibble"

```{r}
aug1 %>% 
  arrange(desc(.hat)) %>% 
  head()
```

## Add counties' names to augment tibble (1/2)

```{r}
names(gapm)
names(aug1)
gapm = gapm %>% mutate(.rownames = 1:n() %>% as.character())
glimpse(gapm)
```


## Add counties' names to augment tibble (2/2)

```{r}
dim(aug1)
aug1 = left_join(aug1, gapm, 
                 by = c(".rownames",
                        "life_expectancy_years_2011", 
                        "female_literacy_rate_2011"))
aug1 = aug1 %>%
  relocate(country, .after = .rownames)
glimpse(aug1)
```

## Countries with high leverage ($h_i > 4/n$)

```{r}
aug1 %>% 
  filter(.hat > 4/80) %>%
  arrange(desc(.hat))

summary(aug1$female_literacy_rate_2011)
```

```{r}
ggplot(gapm, aes(x = female_literacy_rate_2011,
                 y = life_expectancy_years_2011,
                 label = country)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  geom_text()
```

Label only countries with large leverage:

```{r}
# using aug1 for the data since need .hat values
ggplot(aug1, aes(x = female_literacy_rate_2011,
                 y = life_expectancy_years_2011,
                 label = country)) +
  geom_point() +
  geom_smooth(method = "lm", color = "darkgreen") +
  geom_text(aes(label = ifelse(.hat > 0.05, as.character(country), ''))) +
  geom_vline(xintercept = mean(aug1$female_literacy_rate_2011), color = "grey") +
  geom_hline(yintercept = mean(aug1$life_expectancy_years_2011), color = "grey")
```

## What does the model look like without the high leverage points?

Sensitivity analysis removing countries with high leverage

```{r}
ID_low_leverage <- aug1 %>% 
  filter(.hat <= 0.05) %>% 
  pull(country)
ID_low_leverage %>% head()
length(ID_low_leverage)

aug1_lowlev <- aug1 %>% 
  filter(country %in% ID_low_leverage)
dim(aug1_lowlev)

ggplot(aug1_lowlev, aes(x = female_literacy_rate_2011,
                 y = life_expectancy_years_2011,
                 label = country)) +
  geom_point() +
  geom_smooth(method = "lm", color = "darkgreen") +
  geom_text(aes(label = ifelse(.hat > 0.05, as.character(country), ''))) +
  geom_vline(xintercept = mean(aug1_lowlev$female_literacy_rate_2011), color = "grey") +
  geom_hline(yintercept = mean(aug1_lowlev$life_expectancy_years_2011), color = "grey")

model1_lowlev <- lm(life_expectancy_years_2011 ~ female_literacy_rate_2011,
                    data = aug1_lowlev)
tidy(model1_lowlev) %>% gt()
tidy(model1) %>% gt()
```

## Cook's distance

The Cook's distance for the $i^{th}$ observation is 

$$d_i = \frac{h_i}{2(1-h_i)} \cdot r_i^2$$
where $h_i$ is the leverage and $r_i$ is the studentized residual

* Cook's distance values are already in the augment tibble: `.cooksd`

```{r}
#glimpse(aug1)
```

```{r fig.height=4}
# plot(model) shows figures similar to autoplot()
# adds on Cook's distance though
grid.arrange(plot(model1, which = 4),
             plot(model1, which = 5),
             ncol = 1)
```



# Transformations

| Power p | -3  | -2  | -1  | -1/2 	| 0 	|  1/2  |  2  | 3 |
|---------|-----|-----|-----|-------|-----|-------|-----|---|
| y       | $\frac{1}{x^3}$ | $\frac{1}{x^2}$ | $\frac{1}{x}$ | $\frac{1}{\sqrt{x}}$ |    $\log(x)$ |  $x$  | $x^2$  | $x^3$  |

## Example: life expectancy

```{r fig.width=10, fig.height=5}
#| echo: false

gapm <- gapm %>% 
  mutate(
    LE_2 = life_expectancy_years_2011^2,
    LE_3 = life_expectancy_years_2011^3,
    FLR_2 = female_literacy_rate_2011^2,
    FLR_3 = female_literacy_rate_2011^3
  )

plot_m1 <- ggplot(gapm, aes(x = female_literacy_rate_2011,
                 y = life_expectancy_years_2011)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod1: LE ~ FLR")

plot_m2 <- ggplot(gapm, aes(x = female_literacy_rate_2011,
                 y = LE_2)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod2: LE^2 ~ FLR")

plot_m3 <- ggplot(gapm, aes(x = female_literacy_rate_2011,
                 y = LE_3)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod3: LE^3 ~ FLR")

plot_m4 <- ggplot(gapm, aes(x = FLR_2,
                 y = life_expectancy_years_2011)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod4: LE ~ FLR + FLR^2")

plot_m5 <- ggplot(gapm, aes(x = FLR_3,
                 y = life_expectancy_years_2011)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod5: LE ~ FLR + FLR^2 + FLR^3")

plot_m6 <- ggplot(gapm, aes(x = FLR_3,
                 y = LE_3)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod6: LE^3 ~ FLR + FLR^2 + FLR^3")

grid.arrange(plot_m1, plot_m2, plot_m3, 
             plot_m4, plot_m5, plot_m6,
             nrow = 2)

```

## Common transformations

## Transform dependent variable?


```{r}
ggplot(gapm, aes(x = life_expectancy_years_2011)) +
  geom_histogram()
```

## `gladder()`

```{r fig.width=7, fig.height=5}
gladder(gapm$life_expectancy_years_2011)
```

## `ladder()`

* `ladder()` output tests various transformations of the data for normality
* Shapiro-Wilkes test is used to assess for normality
    * $H_0$: data are from a normal population
    * $H_A$: data are NOT from a normal population

```{r}
ladder(gapm$life_expectancy_years_2011) %>% gt()
```

## Transform independent variable?

```{r}
ggplot(gapm, aes(x = female_literacy_rate_2011)) +
  geom_histogram()
```

## `gladder()`

```{r fig.width=7, fig.height=5}
gladder(gapm$female_literacy_rate_2011)
```

## `ladder()`

```{r}
ladder(gapm$female_literacy_rate_2011) %>% gt()
```

## Tips 

## Add quadratic and cubic transformations to dataset

```{r}
names(gapm)

gapm <- gapm %>% 
  mutate(
    LE_2 = life_expectancy_years_2011^2,
    LE_3 = life_expectancy_years_2011^3,
    FLR_2 = female_literacy_rate_2011^2,
    FLR_3 = female_literacy_rate_2011^3
  )

glimpse(gapm)
```

## Compare Scatterplots

```{r fig.width=10, fig.height=5}
#| echo: false

plot_m1 <- ggplot(gapm, aes(x = female_literacy_rate_2011,
                 y = life_expectancy_years_2011)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod1: LE ~ FLR")

plot_m2 <- ggplot(gapm, aes(x = female_literacy_rate_2011,
                 y = LE_2)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod2: LE^2 ~ FLR")

plot_m3 <- ggplot(gapm, aes(x = female_literacy_rate_2011,
                 y = LE_3)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod3: LE^3 ~ FLR")

plot_m4 <- ggplot(gapm, aes(x = FLR_2,
                 y = life_expectancy_years_2011)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod4: LE ~ FLR + FLR^2")

plot_m5 <- ggplot(gapm, aes(x = FLR_3,
                 y = life_expectancy_years_2011)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod5: LE ~ FLR + FLR^2 + FLR^3")

plot_m6 <- ggplot(gapm, aes(x = FLR_3,
                 y = LE_3)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Mod6: LE^3 ~ FLR + FLR^2 + FLR^3")

grid.arrange(plot_m1, plot_m2, plot_m3, 
             plot_m4, plot_m5, plot_m6,
             nrow = 2)

```


## Run models with transformations

Model 2: $LE^2 \sim FLR$

```{r}
model2 <- lm(LE_2 ~ female_literacy_rate_2011,
             data = gapm)

aug2 <- augment(model2)
tidy(model2) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model2)
```

```{r fig.height=3, fig.width=4}
plot(model2, which = 5)
```

Model 3: $LE^3 \sim FLR$

```{r}
model3 <- lm(LE_3 ~ female_literacy_rate_2011,
             data = gapm)

aug3 <- augment(model3)
tidy(model3) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model3)
```

```{r fig.height=3, fig.width=4}
plot(model3, which = 5)
```

Model 4: $LE \sim FLR + FLR^2$

```{r}
model4 <- lm(life_expectancy_years_2011 ~ 
               female_literacy_rate_2011 + FLR_2,
             data = gapm)

aug4 <- augment(model4)
tidy(model4) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model4)
```

```{r fig.height=3, fig.width=4}
plot(model4, which = 5)
```

Model 5: $LE \sim FLR + FLR^2 + FLR^3$

```{r}
model5 <- lm(life_expectancy_years_2011 ~ 
               female_literacy_rate_2011 + FLR_2 + FLR_3,
             data = gapm)

aug5 <- augment(model5)
tidy(model5) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model5)
```

```{r fig.height=3, fig.width=4}
plot(model5, which = 5)
```

Model 6: $LE^3 \sim FLR + FLR^2 + FLR^3$

```{r}
model6 <- lm(LE_3 ~ 
               female_literacy_rate_2011 + FLR_2 + FLR_3,
             data = gapm)

aug6 <- augment(model6)
tidy(model6) %>% gt()
```

```{r fig.height=5, fig.width=7}
autoplot(model6)
```

```{r fig.height=3, fig.width=4}
plot(model6, which = 5)
```

## Normal Q-Q plots comparison

```{r fig.height=5, fig.width=7}
#| echo: false
# par(mfrow=c(#row,#col)) is a base R command
# It sets up the graphics window to show multiple plots in a grid
# specify the number of rows and columns
par(mfrow=c(2,3))  # 2 rows, 3 columns
plot(model1, which = 2)
plot(model2, which = 2)
plot(model3, which = 2)
plot(model4, which = 2)
plot(model5, which = 2)
plot(model6, which = 2)
par(mfrow=c(1,1))  # set back to the standard 1 row x 1 column
```

## Residual plots comparison

```{r fig.height=5, fig.width=7}
#| echo: false

# par(mfrow=c(#row,#col)) is a base R command
# It sets up the graphics window to show multiple plots in a grid
# specify the number of rows and columns
par(mfrow=c(2,3))  # 2 rows, 3 columns
plot(model1, which = 1)
plot(model2, which = 1)
plot(model3, which = 1)
plot(model4, which = 1)
plot(model5, which = 1)
plot(model6, which = 1)
par(mfrow=c(1,1))  # set back to the standard 1 row x 1 column
```


## Leverage & Cook's distance comparison

```{r fig.height=5, fig.width=7}
#| echo: false

# par(mfrow=c(#row,#col)) is a base R command
# It sets up the graphics window to show multiple plots in a grid
# specify the number of rows and columns
par(mfrow=c(2,3))  # 2 rows, 3 columns
plot(model1, which = 5)
plot(model2, which = 5)
plot(model3, which = 5)
plot(model4, which = 5)
plot(model5, which = 5)
plot(model6, which = 5)
par(mfrow=c(1,1))  # set back to the standard 1 row x 1 column
```

## Models comparison

```{r}
# library(gtsummary) for tbl_regression() and tbl_merge()

tbl_model1 <- tbl_regression(model1)

tbl_model2 <- tbl_regression(model2)

tbl_model3 <- tbl_regression(model3)

tbl_model4 <- tbl_regression(model4)

tbl_model5 <- tbl_regression(model5)

tbl_model6 <- tbl_regression(model6)

# Compare models 1-3
tbl_merge(
  tbls = list(tbl_model1, tbl_model2, tbl_model3),
  tab_spanner = c("Model 1: y=LE", "Model 2: y=LE^2", "Model 3: y=LE^3")
  )

# Compare models 4-6
tbl_merge(
  tbls = list(tbl_model4, tbl_model5, tbl_model6),
  tab_spanner = c("Model 4: y=LE", "Model 5: y=LE", "Model 6: y=LE^3")
  )
```


## Other fit statistics comparison

```{r}
glance(model1) %>% gt()
glance(model2) %>% gt()
glance(model3) %>% gt()
glance(model4) %>% gt()
glance(model5) %>% gt()
glance(model6) %>% gt()
```

## Example: Chapter 5 Problem 9

* In an experiment designed to describe the dose–response curve for vitamin K, individual rats were depleted of their vitamin K reserves and then fed dried liver for 4 days at different dosage levels.
* The response of each rat was measured as the concentration of a clotting agent needed to clot a sample of its blood in 3 minutes. 
* The results of the experiment on 12 rats are given in the following table; __values are expressed in common logarithms for both dose and response__.
    * _Note: by "common logarithm" the authors mean a base 10 logarithm_

> Question: why did they choose a log-log transformation?



```{r}
rats <- read_excel("data/CH05Q09.xls")
glimpse(rats)

loglog_plot <- ggplot(rats, aes(x = LOGDOSE, y = LOGCONC)) +
  geom_point() +
  geom_smooth() +
  geom_smooth(method = "lm", color = "darkgreen") +
  labs(title = "Transformed variables")
loglog_plot
```
