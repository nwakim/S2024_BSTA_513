---
title: "Data Management with the `tidyverse`"
subtitle: "Adapted from parts of Mine Çetinkaya-Rundel's tidyverse course"
author: "Nicky Wakim"
title-slide-attributes:
    data-background-color: "#213c96"
date: "01/10/2023"
categories: ["Week 1"]
format: 
  revealjs:
    theme: [default, simple_NW.scss]
    toc: true
    toc-depth: 1
    toc-title: Slides Overview
    chalkboard: true
    slide-number: true
    show-slide-number: all
    width: 1955
    height: 1100
    footer: Data Management
    highlight-style: ayu
---

```{r setup, include = FALSE}
# R options
options(htmltools.dir.version = FALSE)

# figure height, width, dpi
knitr::opts_chunk$set(echo = TRUE, 
                      fig.width = 5, 
                      fig.height = 3,
                      dpi = 300)

# fontawesome
htmltools::tagList(rmarkdown::html_dependency_font_awesome())

# magick
dev.off <- function(){
  invisible(grDevices::dev.off())
}

# set seed
set.seed(1234)

# packages
library(countdown)
library(tidyverse)
library(broom)
library(scales)
library(openintro)
library(jsonlite)
```

## 

![Artwork by \@allison_horst](02_Data_Management/debugging.png){fig-alt="A cartoon of a fuzzy round monster face showing 10 different emotions experienced during the process of debugging code. The progression goes from (1) “I got this” - looking determined and optimistic; (2) “Huh. Really thought that was it.” - looking a bit baffled; (3) “...” - looking up at the ceiling in thought; (4) “Fine. Restarting.” - looking a bit annoyed; (5) “OH WTF.” Looking very frazzled and frustrated; (6) “Zombie meltdown.” - looking like a full meltdown; (7) (blank) - sleeping; (8) “A NEW HOPE!” - a happy looking monster with a lightbulb above; (9) “insert awesome theme song” - looking determined and typing away; (10) “I love coding” - arms raised in victory with a big smile, with confetti falling."}

# Introduction to the `tidyverse`

## 

![](02_Data_Management/spiderverse.jpeg){fig-align="center"}

## What is the tidyverse?

The **tidyverse** is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.

::: columns
::: {.column width="45%"}
-   **ggplot2** - data visualisation
-   **dplyr** - data manipulation
-   **tidyr** - tidy data
-   **readr** - read rectangular data
-   **purrr** - functional programming
-   **tibble** - modern data frames
-   **stringr** - string manipulation
-   **forcats** - factors
-   and many more ...
:::

::: {.column width="55%"}
![](02_Data_Management/tidyverse.png){fig-align="center" width="669"}
:::
:::

## Tidy data[^1]

[^1]: Source: R for Data Science. Grolemund and Wickham.

```{r echo = FALSE, fig.alt = "tidy data diagram"}
knitr::include_graphics("02_Data_Management/img/tidy-data-frame.png")
```

1.  Each variable must have its own column.

2.  Each observation must have its own row.

3.  Each value must have its own cell.

## Pipe operator (`magrittr`)

-   The pipe operator (`%>%`) allows us to step through sequential functions in the same way we follow if-then statements or steps from instructions

 

::: heq
I want to find my keys, then start my car, then drive to work, then park my car.
:::

 

::: columns
::: {.column width="50%"}
**Nested**

```{r eval = FALSE}
park(drive(start_car(find("keys")), 
           to = "work"))
```
:::

::: {.column width="50%"}
**Piped**

```{r eval = FALSE}
find("keys") %>%
  start_car() %>%
  drive(to = "work") %>%
  park()
```
:::
:::

## Recoding a binary variable with pipe operator

 

::: heq
Let's say I want a variable `transmission` to show the category names that are assigned to numeric values in the code. I want `0` to be coded as `automatic` and `1` to be coded as `manual`.
:::

 

::: columns
::: {.column width="50%"}
Base R:

```{r}
mtcars$transmission <-
  ifelse(
    mtcars$am == 0,
    "automatic",
    "manual"
  )
```
:::

::: {.column width="50%"}
Tidyverse:

```{r}
mtcars <- mtcars %>%
  mutate(
    transmission = case_when(
      am == 0 ~ "automatic",
      am == 1 ~ "manual"
    )
  )
```

 

::: hl
`mutate()` creates new columns that are functions of existing variables
:::
:::
:::

## Recoding a multi-level variable

 

::: heq
Let's say I want a variable `gear` to show the category names that are assigned to numeric values in the code. I want `3` to be coded as gear `three`, `4` to be coded as gear `four`, `5` to be coded as gear `five`.
:::

 

::: columns
::: {.column width="50%"}
Base R:

```{r}
mtcars$gear_char <-
  ifelse(
    mtcars$gear == 3,
    "three",
    ifelse(
      mtcars$gear == 4,
      "four",
      "five"
    )
  )
```
:::

::: {.column width="50%"}
Tidyverse:

```{r}
mtcars <- mtcars %>%
  mutate(
    gear_char = case_when(
      gear == 3 ~ "three",
      gear == 4 ~ "four",
      gear == 5 ~ "five"
    )
  )
```
:::
:::

# `ggplot2` revisited

## `ggplot2` in tidyverse

::: columns
::: {.column width="50%"}
```{r echo=FALSE, out.width="80%"}
knitr::include_graphics("02_Data_Management/img/ggplot2-part-of-tidyverse.png")
```
:::

::: {.column width="50%"}
-   We talked about this in our review notes

    -   I want to revisit it: always helps to have more examples!
    -   This example is closer to the multivariable work we'll do in this class!

 

-   **ggplot2** is tidyverse's data visualization package

 

-   The `gg` in "ggplot2" stands for Grammar of Graphics

 

-   It is inspired by the book **Grammar of Graphics** by Leland Wilkinson
:::
:::

## Tidyverse: Visualizing multiple variables

 

```{r out.width = "100%", fig.asp = 0.3, fig.width = 8}
ggplot(
  mtcars,
  aes(x = disp, y = mpg, color = transmission)) +
  geom_point()
```

## Poll Everywhere Question 1

## Tidyverse: Visualizing even more variables

```{r out.width = "100%", fig.asp = 0.3, fig.width = 8}
ggplot(
  mtcars,
  aes(x = disp, y = mpg, color = transmission)) +
  geom_point() +
  facet_wrap(~ cyl)
```

## Base R: Visualizing even more variables

```{r out.width = "100%", fig.asp = 0.3, fig.width = 8}
mtcars$trans_color <- ifelse(mtcars$transmission == "automatic", "green", "blue")
mtcars_cyl4 = mtcars[mtcars$cyl == 4, ]
mtcars_cyl6 = mtcars[mtcars$cyl == 6, ]
mtcars_cyl8 = mtcars[mtcars$cyl == 8, ]
par(mfrow = c(1, 3), mar = c(2.5, 2.5, 2, 0), mgp = c(1.5, 0.5, 0))
plot(mpg ~ disp, data = mtcars_cyl4, col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6, col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8, col = trans_color, main = "Cyl 8")
legend("topright", legend = c("automatic", "manual"), pch = 1, col = c("green", "blue"))
```

# Functions for data management

## Important functions for data management

 

**Data manipulation**

-   `pivot_longer()` and `pivot_wider()`

-   `rename()`

-   `mutate()`

-   `filter()`

-   `select()`

**Summarizing data**

-   `tbl_summary()`
-   `group_by()`
-   `summarize()`
-   `across()`

# Data manipulation

## Example for `pivot_longer()`: Instructional staff employment trends

The American Association of University Professors (AAUP) is a nonprofit membership association of faculty and other academic professionals. [This report](https://www.aaup.org/sites/default/files/files/AAUP_Report_InstrStaff-75-11_apr2013.pdf) by the AAUP shows trends in instructional staff employees between 1975 and 2011, and contains an image very similar to the one given below.

```{r echo=FALSE, out.width="50%", fig.align="center", fig.alt = "staff employment figure"}
knitr::include_graphics("02_Data_Management/img/staff-employment.png")
```

## Data

Each row in this dataset represents a faculty type, and the columns are the years for which we have data. The values are percentage of hires of that type of faculty for each year.

   

```{r load-data-staff, message=FALSE}
(staff <- read_csv("data/instructional-staff.csv"))
```

## Poll Everywhere Question 2

## Recreate the visualization

 

-   In order to recreate this visualization we need to first reshape the data:
    -   one variable for faculty type
    -   one variable for year

 

-   Convert the data from the wide format to long format
    -   `pivot_longer()`

## 

```{r echo=FALSE,out.width="80%",fig.align="center", fig.alt = "pivot friends meme"}
knitr::include_graphics("02_Data_Management/img/pivot.gif")
```

## `pivot_*()` functions

![](02_Data_Management/img/tidyr-longer-wider.gif){fig-align="center"}

## Poll Everywhere Question 3

## Pivot staff data and mutate percentage

```{r}
(staff_long <- staff %>%
  pivot_longer(
    cols = -faculty_type,    # columns to pivot
    names_to = "year",       # name of new column for variable names
    values_to = "percentage" # name of new column for values
  ) %>%
  mutate(percentage = as.numeric(percentage))
)
```

## A "meh" plot over the years

```{r fig.height=2}
ggplot(staff_long, aes(x = percentage, y = year, fill = faculty_type)) +
  geom_col()
```

## More improvement {.smaller}

::: columns
::: {.column width="50%"}
```{r staff-lines-2, eval=FALSE}
staff_long %>%
  mutate( 
    part_time = if_else(faculty_type == "Part-Time Faculty",
                        "Part-Time Faculty", "Other Faculty"),
    year = as.numeric(year)) %>% 
  ggplot(
    aes(x = year, y = percentage/100, group = faculty_type, color = part_time)) +
  geom_line() +
  scale_color_manual(values = c("gray", "red")) + 
  scale_y_continuous(labels = label_percent(accuracy = 1)) + 
  theme_minimal() +
  labs(
    title = "Instructional staff employment trends",
    x = "Year", y = "Percentage", color = NULL) +
  theme(legend.position = "bottom")
```
:::

::: {.column width="50%"}
```{r staff-lines-22, echo=FALSE}
staff_long %>%
  mutate( 
    part_time = if_else(faculty_type == "Part-Time Faculty",
                        "Part-Time Faculty", "Other Faculty"),
    year = as.numeric(year)
  ) %>% 
  ggplot(
    aes(x = year, y = percentage/100, group = faculty_type, color = part_time)
  ) +
  geom_line() +
  scale_color_manual(values = c("gray", "red")) + 
  scale_y_continuous(labels = label_percent(accuracy = 1)) + 
  theme_minimal() +
  labs(
    title = "Instructional staff employment trends",
    x = "Year", y = "Percentage", color = NULL
  ) +
  theme(legend.position = "bottom")
```
:::
:::

## All that just to show one helpful function

Now we can move onto the other functions mentioned:

 

**Data manipulation**

-   `pivot_longer()` and `pivot_wider()`

-   `rename()`

-   `mutate()`

-   `filter()`

-   `select()`

**Summarizing data**

-   `tbl_summary()`
-   `group_by()`
-   `summarize()`
-   `across()`

## Let's look back at the `dds.discr` dataset that I briefly used last class

   

-   We will load the data (This is a special case! `dds.discr` is a built-in R dataset)

```{r}
data("dds.discr")
```

-   Now, let's take a glimpse at the dataset:

```{r}
glimpse(dds.discr)
```

## `rename()`: one of the first things I usually do

-   I notice that two variables have values that don't necessarily match the variable name

    -   Female and male are not genders

    -   "White not Hispanic" combines race and ethnicity into one category

::: heq
I want to rename gender to SAB (sex assigned at birth) and rename ethnicity to R_E (race and ethnicity)
:::

 

```{r}
dds.discr1 = dds.discr %>% 
  rename(SAB = gender, 
         R_E = ethnicity)

glimpse(dds.discr1)
```

## `mutate()`: constructing new variables from what you have

-   We've seen a couple examples for `mutate()` so far (mostly because its used so often!)

-   We haven't seen an example where we make a new variable from two variables

::: heq
I want to make a variable that is the ratio of expenditures over age
:::

 

```{r}
dds.discr2 = dds.discr1 %>%
  mutate(exp_to_age = expenditures/age)

glimpse(dds.discr2)
```

## Poll Everywhere Question 4

## `filter()`: keep rows that match a condition

-   What if I want to subset the data frame? (keep certain rows of observations)

::: heq
I want to look at the data for people who between 50 and 60 years old
:::

 

```{r}
dds.discr3 = dds.discr2 %>%
  filter(age >= 50 & age <= 60)

glimpse(dds.discr3)
```

## `select()`: keep or drop columns using their names and types

-   What if I want to remove or keep certain variables?

::: heq
I want to only have age and expenditure in my data frame
:::

 

```{r}
dds.discr4 = dds.discr2 %>%
  select(age, expenditures)

glimpse(dds.discr4)
```

# Summarizing Data

## `tbl_summary()` : table summary (1/2)

-   What if I want one of those fancy summary tables that are at the top of most research articles? (lovingly called "Table 1")

::: columns
::: {.column width="50%"}
```{r}
#| eval: false

library(gtsummary)
tbl_summary(dds.discr2)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false

library(gtsummary)
tbl_summary(dds.discr2)
```
:::
:::

## `tbl_summary()` : table summary (2/2)

-   Let's make this more presentable

 

::: columns
::: {.column width="70%"}
```{r}
#| eval: false

dds.discr2 %>%
  select(-id, -age.cohort, -exp_to_age) %>%
  tbl_summary(label = c(age ~ "Age", 
                        R_E ~ "Race/Ethnicity", 
                        SAB ~ "Sex Assigned at Birth", 
                        expenditures ~ "Expenditures") ,
              statistic = list(all_continuous() ~ "{mean} ({sd})"))
```
:::

::: {.column width="30%"}
```{r}
#| echo: false

dds.discr2 %>%
  select(-id, -age.cohort, -exp_to_age) %>%
  tbl_summary(label = c(age ~ "Age", 
                        R_E ~ "Race/Ethnicity", 
                        SAB ~ "Sex Assigned at Birth", 
                        expenditures ~ "Expenditures") ,
              statistic = list(all_continuous() ~ "{mean} ({sd})"))
```
:::
:::

## `group_by()`: group by one or more variables

-   What if I want to quickly look at group differences?
-   It will not change how the data look, but changes the actions of following functions

::: heq
I want to group my data by sex assigned at birth.
:::

 

```{r}
dds.discr5 = dds.discr2 %>%
  group_by(SAB)
glimpse(dds.discr5)
```

-   Let's see how the groups change something like the `summarize()` function in the next slide

## `summarize()`: summarize your data or grouped data into one row

-   What if I want to calculate specific descriptive statistics for my variables?
-   This function is often best used with `group_by()`
-   If only presenting the summaries, functions like `tbl_summary()` is better
-   `summarize()` creates a new data frame, which means you can plot and manipulate the summarized data

 

::: columns
::: column
Over whole sample:

```{r}
dds.discr2 %>% 
  summarize(
    ave = mean(expenditures),
    SD = sd(expenditures),
    med = median(expenditures))
```
:::

::: column
Grouped by sex assigned at birth:

```{r}
dds.discr2 %>% 
  group_by(SAB) %>% 
  summarize(
    ave = mean(expenditures),
    SD = sd(expenditures),
    med = median(expenditures))
```
:::
:::

## `across()`: apply a function across multiple columns

-   Like `group_by()`, this function is often paired with another transformation function

::: heq
I want all my integer values to have two significant figures.
:::

 

```{r}
dds.discr6 = dds.discr2 %>%
  mutate(across(where(is.integer), signif, digits = 2))

glimpse(dds.discr6)
```

# Resources

## `dplyr` resources

-   [More `dpylr` functions to reference!](https://dplyr.tidyverse.org/reference/index.html)

Additional details and examples are available in the vignettes:

-   [column-wise operations vignette](https://dplyr.tidyverse.org/articles/colwise.html)

-   [row-wise operations vignette](https://dplyr.tidyverse.org/articles/rowwise.html)

 

and the dplyr 1.0.0 release blog posts:

-   [working across columns](https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-colwise/)
-   [working within rows](https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-rowwise/)

## R programming class at OHSU!

You can check out [Dr. Jessica Minnier's R class page](https://sph-r-programming-2022.netlify.app/) if you want more notes, videos, etc.

## The larger tidy ecosystem

Just to name a few...

-   [janitor](https://garthtarr.github.io/meatR/janitor.html)

-   [kableExtra](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)

-   [patchwork](https://patchwork.data-imaginist.com/)

-   [gghighlight](https://cran.r-project.org/web/packages/gghighlight/vignettes/gghighlight.html)

-   [tidybayes](https://mjskay.github.io/tidybayes/)

## Credit to Mine Çetinkaya-Rundel

-   These notes were built from Mine's notes

    -   Most pages and code were left as she made them

    -   I changed a few things to match our class

-   Please see [her Github repository](https://github.com/mine-cetinkaya-rundel/teach-ds-wsc-2021/tree/main) for the original notes
